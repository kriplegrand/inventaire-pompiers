# CODE COMPLET - Application Inventaire Pompiers
# Généré le 2025-10-06 18:49:16
# Repository: https://github.com/kriplegrand/inventaire-pompiers

## STRUCTURE DU PROJET
./index.html
./tailwind.config.js
./.DS_Store
./vite.config.js 
./README.md
./public/clés de connexion.txt
./.gitignore
./package-lock.json
./package.json
./code-complet-20251006.txt
./postcss.config.js
./src/.DS_Store
./src/index.css
./src/components/.DS_Store
./src/components/SelectionScreen.jsx
./src/components/LoginScreen.jsx
./src/components/admin/TabInventaire.jsx
./src/components/admin/AdminDashboard.jsx
./src/components/admin/TabUsers.jsx
./src/components/admin/TabMateriels.jsx
./src/components/admin/TabConfig.jsx
./src/components/admin/TabVehicules.jsx
./src/components/ControleScreen.jsx
./src/components/InitScreen.jsx
./src/main.jsx
./src/App.jsx
./src/firebase.js
./src/services/db.js

================================

// ==================== FICHIER: package.json ====================

{
  "name": "inventaire-pompiers",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "firebase": "^10.7.1",
    "lucide-react": "^0.263.1"
  },
  "devDependencies": {
    "@types/react": "^18.2.43",
    "@types/react-dom": "^18.2.17",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.16",
    "postcss": "^8.4.32",
    "tailwindcss": "^3.3.6",
    "vite": "^5.0.8"
  }
}

// ==================== FICHIER: tailwind.config.js ====================

// tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

// ==================== FICHIER: postcss.config.js ====================

// postcss.config.js
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

// ==================== FICHIER: .gitignore ====================

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Environment variables
.env
.env.local
.env.production

// ==================== FICHIER: index.html ====================

<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/fire-truck.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Inventaire Pompiers</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

// ==================== FICHIER: src/firebase.js ====================

// src/firebase.js
import { initializeApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';

// REMPLACEZ ces valeurs par VOS clés Firebase
const firebaseConfig = {
  apiKey: "AIzaSyDkcvhdANZdOXOucgF8Sm33cq_0idCq-OU",
  authDomain: "inventaire-pompiers.firebaseapp.com",
  projectId: "inventaire-pompiers",
  storageBucket: "inventaire-pompiers.firebasestorage.app",
  messagingSenderId: "19833960025",
  appId: "1:19833960025:web:c93522bbbdb240045f2348"
};

// Initialiser Firebase
const app = initializeApp(firebaseConfig);

// Initialiser Firestore
export const db = getFirestore(app);

// ==================== FICHIER: src/services/db.js ====================

// src/services/db.js
import { 
  collection, 
  doc, 
  getDoc, 
  getDocs, 
  setDoc, 
  addDoc, 
  updateDoc, 
  deleteDoc,
  query,
  where,
  orderBy
} from 'firebase/firestore';
import { db } from '../firebase';

export const DB = {
  // CONFIG
  async getConfig() {
    try {
      const docRef = doc(db, 'config', 'settings');
      const docSnap = await getDoc(docRef);
      
      if (docSnap.exists()) {
        return docSnap.data();
      } else {
        return { initialized: false };
      }
    } catch (error) {
      console.error('Erreur getConfig:', error);
      return { initialized: false };
    }
  },

  async setConfig(config) {
    try {
      const docRef = doc(db, 'config', 'settings');
      await setDoc(docRef, config, { merge: true });
    } catch (error) {
      console.error('Erreur setConfig:', error);
      throw error;
    }
  },

  // USERS
  async getUsers() {
    try {
      const querySnapshot = await getDocs(collection(db, 'users'));
      return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    } catch (error) {
      console.error('Erreur getUsers:', error);
      return [];
    }
  },

  async addUser(user) {
    try {
      const docRef = await addDoc(collection(db, 'users'), {
        ...user,
        createdAt: new Date().toISOString()
      });
      return { id: docRef.id, ...user };
    } catch (error) {
      console.error('Erreur addUser:', error);
      throw error;
    }
  },

  async updateUser(userId, updates) {
    try {
      const docRef = doc(db, 'users', userId);
      await updateDoc(docRef, updates);
    } catch (error) {
      console.error('Erreur updateUser:', error);
      throw error;
    }
  },

  async deleteUser(userId) {
    try {
      await deleteDoc(doc(db, 'users', userId));
    } catch (error) {
      console.error('Erreur deleteUser:', error);
      throw error;
    }
  },

  async getUserByEmail(email) {
    try {
      const q = query(collection(db, 'users'), where('email', '==', email));
      const querySnapshot = await getDocs(q);
      
      if (!querySnapshot.empty) {
        const doc = querySnapshot.docs[0];
        return { id: doc.id, ...doc.data() };
      }
      return null;
    } catch (error) {
      console.error('Erreur getUserByEmail:', error);
      return null;
    }
  },

  // CAMIONS
  async getCamions() {
    try {
      const querySnapshot = await getDocs(collection(db, 'camions'));
      return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    } catch (error) {
      console.error('Erreur getCamions:', error);
      return [];
    }
  },

  async addCamion(camion) {
    try {
      const docRef = await addDoc(collection(db, 'camions'), {
        ...camion,
        createdAt: new Date().toISOString()
      });
      return { id: docRef.id, ...camion };
    } catch (error) {
      console.error('Erreur addCamion:', error);
      throw error;
    }
  },

  async updateCamion(id, updates) {
    try {
      const docRef = doc(db, 'camions', id);
      await updateDoc(docRef, updates);
    } catch (error) {
      console.error('Erreur updateCamion:', error);
      throw error;
    }
  },

  async deleteCamion(id) {
    try {
      // Supprimer le camion
      await deleteDoc(doc(db, 'camions', id));
      
      // Supprimer tous les équipements associés
      const q = query(collection(db, 'equipements'), where('camionId', '==', id));
      const querySnapshot = await getDocs(q);
      
      const deletePromises = querySnapshot.docs.map(doc => deleteDoc(doc.ref));
      await Promise.all(deletePromises);
    } catch (error) {
      console.error('Erreur deleteCamion:', error);
      throw error;
    }
  },

  // EQUIPEMENTS
  async getEquipements() {
    try {
      const querySnapshot = await getDocs(collection(db, 'equipements'));
      return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    } catch (error) {
      console.error('Erreur getEquipements:', error);
      return [];
    }
  },

  async getEquipementsByCamion(camionId) {
    try {
      const q = query(
        collection(db, 'equipements'), 
        where('camionId', '==', camionId),
        orderBy('ordre')
      );
      const querySnapshot = await getDocs(q);
      return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    } catch (error) {
      console.error('Erreur getEquipementsByCamion:', error);
      return [];
    }
  },

  async addEquipement(equipement) {
    try {
      // Calculer l'ordre
      const q = query(
        collection(db, 'equipements'), 
        where('camionId', '==', equipement.camionId)
      );
      const querySnapshot = await getDocs(q);
      const ordre = querySnapshot.size;

      const docRef = await addDoc(collection(db, 'equipements'), {
        ...equipement,
        ordre,
        createdAt: new Date().toISOString()
      });
      return { id: docRef.id, ...equipement, ordre };
    } catch (error) {
      console.error('Erreur addEquipement:', error);
      throw error;
    }
  },

  async deleteEquipement(id) {
    try {
      await deleteDoc(doc(db, 'equipements', id));
    } catch (error) {
      console.error('Erreur deleteEquipement:', error);
      throw error;
    }
  }
};

// ==================== FICHIER: src/App.jsx ====================

// src/App.jsx
import React, { useState, useEffect } from 'react';
import { DB } from './services/db';
import InitScreen from './components/InitScreen';
import LoginScreen from './components/LoginScreen';
import SelectionScreen from './components/SelectionScreen';
import ControleScreen from './components/ControleScreen';
import AdminDashboard from './components/admin/AdminDashboard';

export default function App() {
  const [initialized, setInitialized] = useState(false);
  const [loading, setLoading] = useState(true);
  const [currentUser, setCurrentUser] = useState(null);
  const [screen, setScreen] = useState('login');
  const [selectedCamion, setSelectedCamion] = useState(null);

  useEffect(() => {
    async function checkInit() {
      const config = await DB.getConfig();
      setInitialized(config.initialized);
      setLoading(false);
    }
    checkInit();
  }, []);

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-4 border-blue-900 mx-auto mb-4"></div>
          <p className="text-gray-600">Chargement...</p>
        </div>
      </div>
    );
  }

  if (!initialized) {
    return <InitScreen onComplete={() => setInitialized(true)} />;
  }

  if (!currentUser) {
    return (
      <LoginScreen
        onLogin={(user) => {
          setCurrentUser(user);
          setScreen(user.role === 'admin' || user.role === 'superadmin' ? 'admin' : 'selection');
        }}
      />
    );
  }

  if (screen === 'admin') {
    return (
      <AdminDashboard
        currentUser={currentUser}
        onLogout={() => {
          setCurrentUser(null);
          setScreen('login');
        }}
      />
    );
  }

  if (screen === 'controle' && selectedCamion) {
    return (
      <ControleScreen
        camion={selectedCamion}
        user={currentUser}
        onBack={() => {
          setSelectedCamion(null);
          setScreen('selection');
        }}
      />
    );
  }

  return (
    <SelectionScreen
      onSelect={(camion) => {
        setSelectedCamion(camion);
        setScreen('controle');
      }}
      onLogout={() => {
        setCurrentUser(null);
        setScreen('login');
      }}
    />
  );
}

// ==================== FICHIER: src/components/ControleScreen.jsx ====================

// src/components/ControleScreen.jsx
import React, { useState, useEffect } from 'react';
import { Check, X, Download } from 'lucide-react';
import { DB } from '../services/db';

export default function ControleScreen({ camion, user, onBack }) {
  const [equipements, setEquipements] = useState([]);
  const [controle, setControle] = useState({});
  const [showRapport, setShowRapport] = useState(false);
  const [rapportData, setRapportData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function loadEquipements() {
      const equips = await DB.getEquipementsByCamion(camion.id);
      setEquipements(equips);
      
      const init = {};
      equips.forEach((e) => {
        init[e.id] = { status: null, commentaire: '' };
      });
      setControle(init);
      setLoading(false);
    }
    loadEquipements();
  }, [camion.id]);

  const handleStatus = (id, status) => {
    setControle((prev) => ({
      ...prev,
      [id]: {
        ...prev[id],
        status,
        commentaire: status === 'absent' ? prev[id].commentaire : '',
      },
    }));
  };

  const handleComment = (equipId, commentaire) => {
    setControle((prev) => ({
      ...prev,
      [equipId]: { ...prev[equipId], commentaire },
    }));
  };

  const verified = Object.values(controle).filter((c) => c.status !== null).length;
  const canValidate = equipements.every((e) => {
    const c = controle[e.id];
    return c && c.status !== null && (c.status !== 'absent' || c.commentaire.trim());
  });

  const handleValidate = async () => {
    const presents = Object.values(controle).filter((c) => c.status === 'present').length;
    const absents = Object.values(controle).filter((c) => c.status === 'absent').length;
    const taux = ((presents / equipements.length) * 100).toFixed(1);
    
    const config = await DB.getConfig();

    const equipementsDetailles = equipements.map((e) => ({
      nom: e.nom,
      status: controle[e.id].status,
      commentaire: controle[e.id].commentaire,
    }));

    setRapportData({
      camion: `${camion.marque} ${camion.type}`,
      immatriculation: camion.immatriculation,
      presents,
      absents,
      total: equipements.length,
      taux,
      emailChef: config.emailChefCorps,
      date: new Date().toLocaleString('fr-FR'),
      controlePar: user?.email || "Utilisateur",
      equipements: equipementsDetailles,
    });
    setShowRapport(true);
  };

  const generatePDF = () => {
    const pdfContent = `<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <style>
    body { font-family: Arial, sans-serif; padding: 40px; }
    h1 { color: #1e40af; text-align: center; margin-bottom: 30px; }
    .header { background: #eff6ff; padding: 20px; border-radius: 8px; margin-bottom: 30px; }
    .header-row { display: flex; justify-content: space-between; margin-bottom: 10px; }
    .label { font-weight: bold; color: #4b5563; }
    table { width: 100%; border-collapse: collapse; margin: 30px 0; }
    th { background: #1e40af; color: white; padding: 12px; text-align: left; }
    td { padding: 10px; border-bottom: 1px solid #e5e7eb; }
    tr:nth-child(even) { background: #f9fafb; }
    .present { color: #059669; font-weight: bold; }
    .absent { color: #dc2626; font-weight: bold; }
    .summary { background: #f3f4f6; padding: 20px; border-radius: 8px; margin-top: 30px; }
    .summary-row { display: flex; justify-content: space-between; margin-bottom: 10px; }
    .footer { text-align: center; color: #6b7280; margin-top: 40px; font-size: 12px; }
  </style>
</head>
<body>
  <h1>🚒 RAPPORT DE CONTRÔLE D'INVENTAIRE</h1>
  <div class="header">
    <div class="header-row">
      <div><span class="label">Date et heure:</span> ${rapportData.date}</div>
    </div>
    <div class="header-row">
      <div><span class="label">Camion:</span> ${rapportData.camion}</div>
      <div><span class="label">Immatriculation:</span> ${rapportData.immatriculation}</div>
    </div>
    <div class="header-row">
      <div><span class="label">Contrôlé par:</span> ${rapportData.controlePar}</div>
    </div>
  </div>
  <h2>Détail des équipements</h2>
  <table>
    <thead>
      <tr>
        <th style="width: 50%">Équipement</th>
        <th style="width: 15%">Statut</th>
        <th style="width: 35%">Commentaire</th>
      </tr>
    </thead>
    <tbody>
      ${rapportData.equipements.map(e => `
        <tr>
          <td>${e.nom}</td>
          <td class="${e.status}">${e.status === 'present' ? '✓ Présent' : '✗ Absent'}</td>
          <td>${e.commentaire || '-'}</td>
        </tr>
      `).join('')}
    </tbody>
  </table>
  <div class="summary">
    <h3 style="margin-top: 0;">Résumé</h3>
    <div class="summary-row">
      <span class="label">Nombre total d'équipements:</span>
      <span>${rapportData.total}</span>
    </div>
    <div class="summary-row">
      <span class="label">Équipements présents:</span>
      <span style="color: #059669; font-weight: bold;">${rapportData.presents}</span>
    </div>
    <div class="summary-row">
      <span class="label">Équipements défaillants ou absents:</span>
      <span style="color: #dc2626; font-weight: bold;">${rapportData.absents}</span>
    </div>
    <div class="summary-row" style="border-top: 2px solid #1e40af; padding-top: 10px; margin-top: 10px;">
      <span class="label" style="font-size: 18px;">Taux de conformité:</span>
      <span style="color: #1e40af; font-weight: bold; font-size: 18px;">${rapportData.taux}%</span>
    </div>
  </div>
  <div class="footer">
    <p>Rapport généré automatiquement le ${rapportData.date}</p>
    <p>Application Inventaire Pompiers - Caserne</p>
  </div>
</body>
</html>`;

    const blob = new Blob([pdfContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `Rapport_${rapportData.immatriculation}_${new Date().toISOString().split('T')[0]}.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleCloseRapport = () => {
    setShowRapport(false);
    setTimeout(() => onBack(), 300);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-4 border-blue-900 mx-auto mb-4"></div>
          <p className="text-gray-600">Chargement des équipements...</p>
        </div>
      </div>
    );
  }

  if (showRapport && rapportData) {
    return (
      <div className="min-h-screen bg-gray-900 bg-opacity-50 flex items-center justify-center p-4">
        <div className="bg-white rounded-lg shadow-2xl p-6 sm:p-8 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
          <div className="text-center mb-6">
            <div className="mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4">
              <Check size={32} className="text-green-600" />
            </div>
            <h2 className="text-2xl font-bold text-gray-800 mb-2">✅ Rapport Généré</h2>
            <p className="text-gray-600">Le contrôle a été validé avec succès</p>
          </div>

          <div className="border-2 border-blue-900 rounded-lg p-3 sm:p-6 mb-6 bg-gray-50">
            <h3 className="text-base sm:text-lg font-bold text-blue-900 mb-4 text-center">
              Aperçu du Rapport
            </h3>

            <div className="bg-white rounded p-3 sm:p-4 mb-4 space-y-2 text-xs sm:text-sm">
              <div className="flex flex-col sm:flex-row sm:justify-between gap-1">
                <span className="text-gray-600 font-medium">Date et heure:</span>
                <span className="font-medium break-all">{rapportData.date}</span>
              </div>
              <div className="flex flex-col sm:flex-row sm:justify-between gap-1">
                <span className="text-gray-600 font-medium">Camion:</span>
                <span className="font-bold break-words">{rapportData.camion}</span>
              </div>
              <div className="flex flex-col sm:flex-row sm:justify-between gap-1">
                <span className="text-gray-600 font-medium">Immatriculation:</span>
                <span className="font-bold">{rapportData.immatriculation}</span>
              </div>
              <div className="flex flex-col sm:flex-row sm:justify-between gap-1">
                <span className="text-gray-600 font-medium">Contrôlé par:</span>
                <span className="font-medium break-all">{rapportData.controlePar}</span>
              </div>
            </div>

            <div className="bg-white rounded p-3 sm:p-4 mb-4">
              <h4 className="font-bold mb-3 text-xs sm:text-sm">Résumé des équipements</h4>
              <div className="space-y-2 text-xs sm:text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">Total:</span>
                  <span className="font-bold">{rapportData.total}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Présents:</span>
                  <span className="font-bold text-green-600">{rapportData.presents}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Défaillants/Absents:</span>
                  <span className="font-bold text-red-600">{rapportData.absents}</span>
                </div>
                <div className="flex justify-between border-t-2 border-blue-900 pt-2 mt-2">
                  <span className="text-gray-700 font-bold text-sm sm:text-base">
                    Taux de conformité:
                  </span>
                  <span className="font-bold text-blue-900 text-base sm:text-lg">
                    {rapportData.taux}%
                  </span>
                </div>
              </div>
            </div>

            {rapportData.absents > 0 && (
              <div className="bg-white rounded p-3 sm:p-4">
                <h4 className="font-bold mb-3 text-xs sm:text-sm text-red-700">
                  Équipements défaillants ou absents
                </h4>
                <ul className="space-y-2 text-xs sm:text-sm">
                  {rapportData.equipements
                    .filter((e) => e.status === 'absent')
                    .map((e, i) => (
                      <li key={i} className="border-l-2 border-red-500 pl-2 sm:pl-3">
                        <div className="font-medium break-words">{e.nom}</div>
                        <div className="text-gray-600 text-xs italic break-words">
                          {e.commentaire}
                        </div>
                      </li>
                    ))}
                </ul>
              </div>
            )}
          </div>

          <div className="bg-blue-50 border-l-4 border-blue-900 p-3 mb-6">
            <p className="text-xs sm:text-sm text-blue-900">
              Le rapport sera envoyé à :{' '}
              <strong className="break-all block sm:inline mt-1 sm:mt-0">
                {rapportData.emailChef}
              </strong>
            </p>
          </div>

          <div className="flex flex-col sm:flex-row gap-3">
            <button
              onClick={generatePDF}
              className="flex-1 bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 transition font-medium flex items-center justify-center gap-2"
            >
              <Download size={20} />
              Télécharger le Rapport
            </button>
            <button
              onClick={handleCloseRapport}
              className="flex-1 bg-blue-900 text-white py-3 rounded-lg hover:bg-blue-800 transition font-medium"
            >
              Terminer
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (equipements.length === 0) {
    return (
      <div className="min-h-screen bg-gray-100">
        <div className="bg-blue-900 text-white p-4">
          <h1 className="text-2xl font-bold max-w-4xl mx-auto">
            Contrôle - {camion.marque}
          </h1>
        </div>
        <div className="max-w-4xl mx-auto p-6">
          <div className="bg-white rounded-lg shadow p-8 text-center">
            <p className="text-gray-600 mb-4">Aucun équipement configuré.</p>
            <button
              onClick={onBack}
              className="bg-gray-600 text-white px-6 py-2 rounded-lg"
            >
              Retour
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100">
      <div className="bg-blue-900 text-white p-4">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-2xl font-bold mb-2">
            Contrôle - {camion.marque} {camion.type}
          </h1>
          <p className="text-blue-200">Immatriculation: {camion.immatriculation}</p>
          <p className="text-blue-200 text-sm">Contrôlé par: {user?.email 
|| "Utilisateur"}</p>
        </div>
      </div>
      <div className="max-w-4xl mx-auto p-6">
        <div className="bg-white rounded-lg shadow p-4 mb-6">
          <div className="flex justify-between items-center">
            <span className="font-medium">
              Progression: {verified} / {equipements.length}
            </span>
            <div className="w-48 bg-gray-200 rounded-full h-2">
              <div
                className="bg-blue-900 h-2 rounded-full transition-all"
                style={{ width: `${(verified / equipements.length) * 100}%` }}
              />
            </div>
          </div>
        </div>
        <div className="space-y-4 mb-6">
          {equipements.map((equip) => {
            const c = controle[equip.id];
            return (
              <div key={equip.id} className="bg-white rounded-lg shadow p-4">
                <h3 className="font-medium mb-3">{equip.nom}</h3>
                <div className="flex gap-3 mb-3">
                  <button
                    onClick={() => handleStatus(equip.id, 'present')}
                    className={`flex-1 py-3 rounded-lg border-2 font-medium flex items-center justify-center gap-2 ${
                      c.status === 'present'
                        ? 'bg-green-500 border-green-500 text-white'
                        : 'border-gray-300 hover:border-green-500'
                    }`}
                  >
                    <Check size={20} />
                    Présent
                  </button>
                  <button
                    onClick={() => handleStatus(equip.id, 'absent')}
                    className={`flex-1 py-3 rounded-lg border-2 font-medium flex items-center justify-center gap-2 text-sm sm:text-base ${
                      c.status === 'absent'
                        ? 'bg-red-500 border-red-500 text-white'
                        : 'border-gray-300 hover:border-red-500'
                    }`}
                  >
                    <X size={20} />
                    Défaillant ou absent
                  </button>
                </div>
                {c.status === 'absent' && (
                  <div>
                    <label className="block text-sm font-medium text-red-700 mb-2">
                      Raison de la défaillance ou absence (obligatoire)
                    </label>
                    <textarea
                      value={c.commentaire}
                      onChange={(e) => handleComment(equip.id, e.target.value)}
                      placeholder="Ex: matériel cassé, en commande, prêté à une autre caserne..."
                      className="w-full px-3 py-2 border border-red-300 rounded-lg focus:ring-2 focus:ring-red-500"
                      rows="2"
                    />
                  </div>
                )}
              </div>
            );
          })}
        </div>
        <div className="flex gap-4">
          <button
            onClick={onBack}
            className="flex-1 bg-gray-600 text-white py-3 rounded-lg hover:bg-gray-700"
          >
            Annuler
          </button>
          <button
            onClick={handleValidate}
            disabled={!canValidate}
            className={`flex-1 py-3 rounded-lg font-medium ${
              canValidate
                ? 'bg-blue-900 text-white hover:bg-blue-800'
                : 'bg-gray-300 text-gray-500 cursor-not-allowed'
            }`}
          >
            {canValidate ? 'Valider le Contrôle' : 'Complétez TOUS les équipements'}
          </button>
        </div>
      </div>
    </div>
  );
}


// ==================== FICHIER: src/components/InitScreen.jsx ====================

// src/components/InitScreen.jsx
import React, { useState } from 'react';
import { DB } from '../services/db';

export default function InitScreen({ onComplete }) {
  const [superAdmin, setSuperAdmin] = useState('');
  const [chef, setChef] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSubmit = async () => {
    setError('');
    setLoading(true);

    if (!superAdmin || !chef) {
      setError('Tous les champs sont requis');
      setLoading(false);
      return;
    }

    if (!superAdmin.includes('@') || !chef.includes('@')) {
      setError('Veuillez entrer des adresses email valides');
      setLoading(false);
      return;
    }

    try {
      await DB.setConfig({ 
        initialized: true, 
        emailChefCorps: chef, 
        superAdminEmail: superAdmin 
      });
      
      await DB.addUser({ 
        email: superAdmin, 
        role: 'superadmin', 
        validated: true 
      });
      
      onComplete();
    } catch (err) {
      setError('Erreur: ' + err.message);
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-900 to-blue-700 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg shadow-xl p-8 max-w-md w-full">
        <h1 className="text-2xl font-bold text-blue-900 mb-6 text-center">
          🚒 Configuration Initiale
        </h1>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Email Super Administrateur
            </label>
            <input
              type="email"
              value={superAdmin}
              onChange={(e) => setSuperAdmin(e.target.value)}
              className="w-full px-4 py-2 border rounded-lg"
              disabled={loading}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Email Chef de Corps
            </label>
            <input
              type="email"
              value={chef}
              onChange={(e) => setChef(e.target.value)}
              className="w-full px-4 py-2 border rounded-lg"
              disabled={loading}
            />
          </div>
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
              {error}
            </div>
          )}
          <button
            onClick={handleSubmit}
            disabled={loading}
            className="w-full bg-blue-900 text-white py-3 rounded-lg hover:bg-blue-800 disabled:bg-gray-400"
          >
            {loading ? 'Initialisation...' : 'Initialiser'}
          </button>
        </div>
      </div>
    </div>
  );
}

// ==================== FICHIER: src/components/LoginScreen.jsx ====================

// src/components/LoginScreen.jsx
import React, { useState } from 'react';
import { AlertCircle } from 'lucide-react';
import { DB } from '../services/db';

export default function LoginScreen({ onLogin }) {
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState('');
  const [isError, setIsError] = useState(false);
  const [loading, setLoading] = useState(false);

  const handleLogin = async () => {
    if (!email) {
      setMessage('Entrez votre email');
      setIsError(true);
      return;
    }

    setLoading(true);
    setMessage('');

    try {
      const user = await DB.getUserByEmail(email);
      
      if (!user) {
        await DB.addUser({ email, role: 'user', validated: false });
        setMessage("Votre accès n'a pas encore été validé par un administrateur");
        setIsError(true);
        setLoading(false);
        return;
      }

      if (!user.validated) {
        setMessage("Votre accès n'a pas encore été validé par un administrateur");
        setIsError(true);
        setLoading(false);
        return;
      }

      onLogin(user);
    } catch (error) {
      setMessage('Erreur de connexion: ' + error.message);
      setIsError(true);
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-900 to-blue-700 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg shadow-xl p-8 max-w-md w-full">
        <h1 className="text-3xl font-bold text-blue-900 mb-2 text-center">
          🚒 Inventaire Pompiers
        </h1>
        <p className="text-gray-600 text-center mb-6">Contrôle des équipements</p>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Adresse Email
            </label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && !loading && handleLogin()}
              className="w-full px-4 py-2 border rounded-lg"
              placeholder="votre.email@caserne.fr"
              disabled={loading}
            />
          </div>
          {message && (
            <div
              className={`${
                isError
                  ? 'bg-red-50 border-red-200 text-red-700'
                  : 'bg-green-50 border-green-200 text-green-700'
              } border px-4 py-3 rounded-lg flex items-center gap-2`}
            >
              <AlertCircle size={20} />
              <span className="text-sm">{message}</span>
            </div>
          )}
          <button
            onClick={handleLogin}
            disabled={loading}
            className="w-full bg-blue-900 text-white py-3 rounded-lg hover:bg-blue-800 disabled:bg-gray-400"
          >
            {loading ? 'Connexion...' : 'Entrer'}
          </button>
        </div>
      </div>
    </div>
  );
}

// ==================== FICHIER: src/components/SelectionScreen.jsx ====================

// src/components/SelectionScreen.jsx
import React, { useState, useEffect } from 'react';
import { Truck, LogOut } from 'lucide-react';
import { DB } from '../services/db';

export default function SelectionScreen({ onSelect, onLogout }) {
  const [camions, setCamions] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function loadCamions() {
      const data = await DB.getCamions();
      setCamions(data);
      setLoading(false);
    }
    loadCamions();
  }, []);

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-4 border-blue-900 mx-auto mb-4"></div>
          <p className="text-gray-600">Chargement des camions...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100">
      <div className="bg-blue-900 text-white p-4 shadow-lg">
        <div className="max-w-6xl mx-auto flex justify-between items-center">
          <h1 className="text-2xl font-bold">🚒 Sélection du Camion</h1>
          <button
            onClick={onLogout}
            className="flex items-center gap-2 bg-blue-800 hover:bg-blue-700 px-4 py-2 rounded-lg"
          >
            <LogOut size={20} />
            Déconnexion
          </button>
        </div>
      </div>
      <div className="max-w-6xl mx-auto p-6">
        <div className="bg-blue-50 border-l-4 border-blue-900 p-4 mb-6">
          <p className="text-blue-900 font-medium">
            👉 Choisissez le camion à inventorier en cliquant sur la carte correspondante
          </p>
        </div>
        {camions.length === 0 ? (
          <div className="bg-white rounded-lg shadow p-8 text-center">
            <p className="text-gray-600">Aucun camion disponible.</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {camions.map((c) => (
              <div
                key={c.id}
                onClick={() => onSelect(c)}
                className="bg-white rounded-lg shadow hover:shadow-lg transition cursor-pointer p-6"
              >
                <div className="flex items-center gap-4 mb-4">
                  <Truck size={40} className="text-blue-900" />
                  <div>
                    <h3 className="font-bold text-lg">{c.marque}</h3>
                    <p className="text-gray-600">{c.type}</p>
                  </div>
                </div>
                <div className="bg-gray-100 px-3 py-2 rounded">
                  <p className="text-sm text-gray-600">Immatriculation</p>
                  <p className="font-bold">{c.immatriculation}</p>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}

// ==================== FICHIER: src/components/admin/AdminDashboard.jsx ====================

// src/components/admin/AdminDashboard.jsx
import React, { useState } from 'react';
import { LogOut, ClipboardList, Truck, Users, Settings } from 
'lucide-react';
import TabInventaire from './TabInventaire';
import TabVehicules from './TabVehicules';
import TabMateriels from './TabMateriels';
import TabUsers from './TabUsers';
import TabConfig from './TabConfig';
import ControleScreen from '../ControleScreen';

function TabButton({ active, onClick, icon: Icon, label, shortLabel }) {
  return (
    <button
      onClick={onClick}
      className={`px-3 sm:px-6 py-3 sm:py-4 font-medium text-xs 
sm:text-base whitespace-nowrap ${
        active ? 'text-blue-900 border-b-2 border-blue-900' : 
'text-gray-600 hover:text-gray-800'
      }`}
    >
      <Icon className="inline mr-1 sm:mr-2" size={16} />
      <span className="hidden sm:inline">{label}</span>
      <span className="inline sm:hidden">{shortLabel}</span>
    </button>
  );
}

export default function AdminDashboard({ currentUser, onLogout }) {
  const [tab, setTab] = useState('vehicules');
  const [selectedCamion, setSelectedCamion] = useState(null);

  if (tab === 'inventaire' && selectedCamion) {
    return (
      <ControleScreen
        camion={selectedCamion}
        user={currentUser}
        onBack={() => {
          setSelectedCamion(null);
          setTab('inventaire');
        }}
      />
    );
  }

  return (
    <div className="min-h-screen bg-gray-100">
      <div className="bg-blue-900 text-white p-4">
        <div className="max-w-7xl mx-auto flex flex-col sm:flex-row 
justify-between items-start sm:items-center gap-3">
          <h1 className="text-xl sm:text-2xl font-bold">🚒 
Administration</h1>
          <div className="flex items-center gap-3 text-sm sm:text-base">
            <span className="text-blue-200 truncate max-w-[150px] 
sm:max-w-none">
              {currentUser.email}
            </span>
            <button
              onClick={onLogout}
              className="flex items-center gap-2 bg-blue-800 
hover:bg-blue-700 px-3 sm:px-4 py-2 rounded-lg whitespace-nowrap"
            >
              <LogOut size={18} />
              <span className="hidden sm:inline">Déconnexion</span>
            </button>
          </div>
        </div>
      </div>
      <div className="max-w-7xl mx-auto">
        <div className="bg-white shadow-sm border-b">
          <div className="overflow-x-auto">
            <div className="flex">
              <TabButton
                active={tab === 'inventaire'}
                onClick={() => setTab('inventaire')}
                icon={ClipboardList}
                label="Inventaire"
                shortLabel="Invent."
              />
              <TabButton
                active={tab === 'vehicules'}
                onClick={() => setTab('vehicules')}
                icon={Truck}
                label="Véhicules"
                shortLabel="Véhic."
              />
              <TabButton
                active={tab === 'materiels'}
                onClick={() => setTab('materiels')}
                icon={ClipboardList}
                label="Matériels"
                shortLabel="Matér."
              />
              <TabButton
                active={tab === 'users'}
                onClick={() => setTab('users')}
                icon={Users}
                label="Utilisateurs"
                shortLabel="Users"
              />
              <TabButton
                active={tab === 'config'}
                onClick={() => setTab('config')}
                icon={Settings}
                label="Configuration"
                shortLabel="Config"
              />
            </div>
          </div>
        </div>
        {tab === 'inventaire' && (
          <TabInventaire onSelectCamion={(camion) => 
setSelectedCamion(camion)} />
        )}
        {tab === 'vehicules' && <TabVehicules />}
        {tab === 'materiels' && <TabMateriels />}
        {tab === 'users' && <TabUsers currentUser={currentUser} />}
        {tab === 'config' && <TabConfig currentUser={currentUser} />}
      </div>
    </div>
  );
}


// ==================== FICHIER: src/components/admin/TabConfig.jsx ====================

// src/components/admin/TabConfig.jsx
import React, { useState, useEffect } from 'react';
import { Edit2 } from 'lucide-react';
import { DB } from '../../services/db';

export default function TabConfig({ currentUser }) {
  const [config, setConfigState] = useState(null);
  const [emailChef, setEmailChef] = useState('');
  const [newEmail, setNewEmail] = useState('');
  const [showEditProfile, setShowEditProfile] = useState(false);
  const [message, setMessage] = useState('');
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [userCount, setUserCount] = useState(0);
  const [camionCount, setCamionCount] = useState(0);

  useEffect(() => {
    loadConfig();
  }, []);

  async function loadConfig() {
    const cfg = await DB.getConfig();
    setConfigState(cfg);
    setEmailChef(cfg.emailChefCorps || '');
    
    const users = await DB.getUsers();
    setUserCount(users.length);
    
    const camions = await DB.getCamions();
    setCamionCount(camions.length);
    
    setLoading(false);
  }

  const handleSaveChefEmail = async () => {
    setSubmitting(true);
    try {
      const cfg = await DB.getConfig();
      await DB.setConfig({ ...cfg, emailChefCorps: emailChef });
      setMessage('Email enregistré');
      setTimeout(() => setMessage(''), 3000);
    } catch (err) {
      setMessage('Erreur: ' + err.message);
    }
    setSubmitting(false);
  };

  const handleUpdateProfile = async () => {
    if (!newEmail) return;
    setSubmitting(true);
    try {
      const cfg = await DB.getConfig();
      await DB.setConfig({ ...cfg, superAdminEmail: newEmail });
      await DB.updateUser(currentUser.id, { email: newEmail });
      setMessage('Profil mis à jour');
      setShowEditProfile(false);
      setNewEmail('');
      setTimeout(() => window.location.reload(), 2000);
    } catch (err) {
      setMessage('Erreur: ' + err.message);
    }
    setSubmitting(false);
  };

  if (loading) {
    return (
      <div className="p-6 flex justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-4 
border-blue-900"></div>
      </div>
    );
  }

  if (!currentUser) {
    return (
      <div className="p-6">
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 
py-3 rounded-lg">
          Erreur: Utilisateur non connecté
        </div>
      </div>
    );
  }

  return (
    <div className="p-4 sm:p-6 space-y-6">
      <h2 className="text-xl sm:text-2xl font-bold">Configuration</h2>

      {message && (
        <div className="bg-green-50 border border-green-200 text-green-700 
px-4 py-3 rounded-lg text-sm">
          {message}
        </div>
      )}

      <div className="bg-white rounded-lg shadow p-4 sm:p-6">
        <h3 className="text-lg sm:text-xl font-bold mb-4">Email du Chef de 
Corps</h3>
        <div className="flex flex-col sm:flex-row gap-3">
          <input
            type="email"
            value={emailChef}
            onChange={(e) => setEmailChef(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && !submitting && 
handleSaveChefEmail()}
            className="flex-1 px-4 py-2 border rounded-lg"
            placeholder="chef@caserne.fr"
            disabled={submitting}
          />
          <button
            onClick={handleSaveChefEmail}
            className="bg-blue-900 text-white px-6 py-2 rounded-lg 
hover:bg-blue-800 w-full sm:w-auto disabled:bg-gray-400"
            disabled={submitting}
          >
            {submitting ? 'Enregistrement...' : 'Enregistrer'}
          </button>
        </div>
      </div>

      {currentUser.role === 'superadmin' && (
        <div className="bg-white rounded-lg shadow p-4 sm:p-6">
          <h3 className="text-lg sm:text-xl font-bold mb-4">Profil Super 
Administrateur</h3>
          {!showEditProfile ? (
            <button
              onClick={() => setShowEditProfile(true)}
              className="bg-blue-900 text-white px-4 py-2 rounded-lg 
hover:bg-blue-800 flex items-center gap-2 w-full sm:w-auto justify-center"
            >
              <Edit2 size={18} />
              Modifier mon profil
            </button>
          ) : (
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">Nouvelle 
adresse email</label>
                <input
                  type="email"
                  value={newEmail}
                  onChange={(e) => setNewEmail(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && !submitting && 
handleUpdateProfile()}
                  className="w-full px-4 py-2 border rounded-lg"
                  placeholder={currentUser.email}
                  disabled={submitting}
                />
              </div>
              <div className="flex flex-col sm:flex-row gap-3">
                <button
                  onClick={() => {
                    setShowEditProfile(false);
                    setNewEmail('');
                  }}
                  className="flex-1 bg-gray-600 text-white py-2 
rounded-lg"
                  disabled={submitting}
                >
                  Annuler
                </button>
                <button
                  onClick={handleUpdateProfile}
                  className="flex-1 bg-blue-900 text-white py-2 rounded-lg 
disabled:bg-gray-400"
                  disabled={submitting}
                >
                  {submitting ? 'Enregistrement...' : 'Enregistrer'}
                </button>
              </div>
            </div>
          )}
        </div>
      )}

      <div className="bg-white rounded-lg shadow p-4 sm:p-6">
        <h3 className="text-lg sm:text-xl font-bold mb-4">Informations 
Système</h3>
        <div className="space-y-3 text-sm sm:text-base">
          <div className="flex justify-between items-start">
            <span className="text-gray-600">Super Admin:</span>
            <span className="font-medium text-right break-all ml-2">
              {config?.superAdminEmail || 'Non configuré'}
            </span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-600">Camions:</span>
            <span className="font-medium">{camionCount}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-600">Utilisateurs:</span>
            <span className="font-medium">{userCount}</span>
          </div>
        </div>
      </div>
    </div>
  );
}


// ==================== FICHIER: src/components/admin/TabInventaire.jsx ====================

// src/components/admin/TabInventaire.jsx
import React, { useState, useEffect } from 'react';
import { Truck } from 'lucide-react';
import { DB } from '../../services/db';

export default function TabInventaire({ onSelectCamion }) {
  const [camions, setCamions] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function loadCamions() {
      const data = await DB.getCamions();
      setCamions(data);
      setLoading(false);
    }
    loadCamions();
  }, []);

  if (loading) {
    return (
      <div className="p-6 flex justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-4 border-blue-900"></div>
      </div>
    );
  }

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-2">Inventaire des Camions</h2>
      <p className="text-gray-600 mb-6">Effectuez un contrôle d'inventaire en tant qu'administrateur</p>

      <div className="bg-blue-50 border-l-4 border-blue-900 p-4 mb-6">
        <p className="text-blue-900 font-medium">
          👉 Choisissez le camion à inventorier en cliquant sur la carte correspondante
        </p>
      </div>

      {camions.length === 0 ? (
        <div className="bg-white rounded-lg shadow p-8 text-center">
          <p className="text-gray-600">Aucun camion disponible.</p>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {camions.map((c) => (
            <div
              key={c.id}
              onClick={() => onSelectCamion(c)}
              className="bg-white rounded-lg shadow hover:shadow-lg transition cursor-pointer p-6"
            >
              <div className="flex items-center gap-4 mb-4">
                <Truck size={40} className="text-blue-900" />
                <div>
                  <h3 className="font-bold text-lg">{c.marque}</h3>
                  <p className="text-gray-600">{c.type}</p>
                </div>
              </div>
              <div className="bg-gray-100 px-3 py-2 rounded">
                <p className="text-sm text-gray-600">Immatriculation</p>
                <p className="font-bold">{c.immatriculation}</p>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

// ==================== FICHIER: src/components/admin/TabMateriels.jsx ====================

// src/components/admin/TabMateriels.jsx
import React, { useState, useEffect } from 'react';
import { Truck, Trash2 } from 'lucide-react';
import { DB } from '../../services/db';

export default function TabMateriels() {
  const [camions, setCamions] = useState([]);
  const [selected, setSelected] = useState(null);
  const [equipements, setEquipements] = useState([]);
  const [nom, setNom] = useState('');
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    loadCamions();
  }, []);

  async function loadCamions() {
    const data = await DB.getCamions();
    setCamions(data);
    setLoading(false);
  }

  const loadEquips = async (c) => {
    setSelected(c);
    setLoading(true);
    const data = await DB.getEquipementsByCamion(c.id);
    setEquipements(data);
    setLoading(false);
  };

  const handleAdd = async () => {
    if (!nom.trim()) return;
    setSubmitting(true);
    try {
      await DB.addEquipement({ camionId: selected.id, nom });
      setNom('');
      const data = await DB.getEquipementsByCamion(selected.id);
      setEquipements(data);
    } catch (err) {
      alert('Erreur: ' + err.message);
    }
    setSubmitting(false);
  };

  const handleDelete = async (id) => {
    if (window.confirm('Supprimer cet équipement ?')) {
      try {
        await DB.deleteEquipement(id);
        const data = await DB.getEquipementsByCamion(selected.id);
        setEquipements(data);
      } catch (err) {
        alert('Erreur: ' + err.message);
      }
    }
  };

  if (loading && !selected) {
    return (
      <div className="p-6 flex justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-4 border-blue-900"></div>
      </div>
    );
  }

  if (selected) {
    return (
      <div className="p-4 sm:p-6">
        <div className="mb-6">
          <button
            onClick={() => setSelected(null)}
            className="text-blue-900 hover:underline mb-4"
          >
            ← Retour
          </button>
          <h2 className="text-xl sm:text-2xl font-bold">
            Équipements de {selected.marque} {selected.type}
          </h2>
          <p className="text-gray-600">{selected.immatriculation}</p>
        </div>
        <div className="bg-white rounded-lg shadow p-4 sm:p-6 mb-6">
          <h3 className="font-bold mb-4">Ajouter un équipement</h3>
          <div className="flex flex-col sm:flex-row gap-3">
            <input
              type="text"
              value={nom}
              onChange={(e) => setNom(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && !submitting && handleAdd()}
              placeholder="Nom de l'équipement"
              className="flex-1 px-3 py-2 border rounded-lg"
              disabled={submitting}
            />
            <button
              onClick={handleAdd}
              className="bg-blue-900 text-white px-6 py-2 rounded-lg hover:bg-blue-800 w-full sm:w-auto disabled:bg-gray-400"
              disabled={submitting}
            >
              {submitting ? 'Ajout...' : 'Ajouter'}
            </button>
          </div>
        </div>
        <div className="bg-white rounded-lg shadow p-4 sm:p-6">
          <h3 className="font-bold mb-4">Liste ({equipements.length})</h3>
          {loading ? (
            <div className="flex justify-center py-8">
              <div className="animate-spin rounded-full h-12 w-12 border-b-4 border-blue-900"></div>
            </div>
          ) : equipements.length === 0 ? (
            <p className="text-gray-600">Aucun équipement.</p>
          ) : (
            <ul className="space-y-2">
              {equipements.map((e) => (
                <li key={e.id} className="flex justify-between items-center p-3 bg-gray-50 rounded">
                  <span className="break-all pr-2">{e.nom}</span>
                  <button
                    onClick={() => handleDelete(e.id)}
                    className="text-red-600 hover:text-red-800 flex-shrink-0"
                  >
                    <Trash2 size={18} />
                  </button>
                </li>
              ))}
            </ul>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="p-4 sm:p-6">
      <h2 className="text-xl sm:text-2xl font-bold mb-6">Liste des Matériels</h2>
      {camions.length === 0 ? (
        <div className="bg-white rounded-lg shadow p-8 text-center">
          <p className="text-gray-600">Créez d'abord des camions.</p>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {camions.map((c) => {
            return (
              <div
                key={c.id}
                onClick={() => loadEquips(c)}
                className="bg-white rounded-lg shadow hover:shadow-lg transition cursor-pointer p-6"
              >
                <div className="flex items-center gap-4 mb-4">
                  <Truck size={40} className="text-blue-900" />
                  <div>
                    <h3 className="font-bold text-lg">{c.marque}</h3>
                    <p className="text-gray-600">{c.type}</p>
                  </div>
                </div>
                <div className="bg-gray-100 px-3 py-2 rounded">
                  <p className="text-sm text-gray-600">Équipements configurés</p>
                  <p className="font-bold text-blue-900">Cliquez pour gérer</p>
                </div>
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
}

// ==================== FICHIER: src/components/admin/TabUsers.jsx ====================

// src/components/admin/TabUsers.jsx
import React, { useState, useEffect } from 'react';
import { Plus } from 'lucide-react';
import { DB } from '../../services/db';

export default function TabUsers({ currentUser }) {
  const [users, setUsers] = useState([]);
  const [showAddForm, setShowAddForm] = useState(false);
  const [newUserEmail, setNewUserEmail] = useState('');
  const [newUserRole, setNewUserRole] = useState('user');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    loadUsers();
  }, []);

  async function loadUsers() {
    const data = await DB.getUsers();
    setUsers(data);
    setLoading(false);
  }

  const handleAddUser = async () => {
    setError('');
    if (!newUserEmail || !newUserEmail.includes('@')) {
      setError('Email invalide');
      return;
    }
    const exists = users.find((u) => u.email === newUserEmail);
    if (exists) {
      setError('Utilisateur existe déjà');
      return;
    }

    setSubmitting(true);
    try {
      await DB.addUser({ email: newUserEmail, role: newUserRole, validated: true });
      await loadUsers();
      setNewUserEmail('');
      setNewUserRole('user');
      setShowAddForm(false);
    } catch (err) {
      setError('Erreur: ' + err.message);
    }
    setSubmitting(false);
  };

  const handleValidate = async (userId) => {
    try {
      await DB.updateUser(userId, { validated: true });
      await loadUsers();
    } catch (err) {
      alert('Erreur: ' + err.message);
    }
  };

  const handleDelete = async (user) => {
    if (user.role === 'superadmin') {
      alert('Le super administrateur ne peut pas être supprimé');
      return;
    }
    if (window.confirm(`Supprimer ${user.email} ?`)) {
      try {
        await DB.deleteUser(user.id);
        await loadUsers();
      } catch (err) {
        alert('Erreur: ' + err.message);
      }
    }
  };

  const handleChangeRole = async (userId, newRole) => {
    try {
      await DB.updateUser(userId, { role: newRole });
      await loadUsers();
    } catch (err) {
      alert('Erreur: ' + err.message);
    }
  };

  if (loading) {
    return (
      <div className="p-6 flex justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-4 border-blue-900"></div>
      </div>
    );
  }

  return (
    <div className="p-4 sm:p-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 mb-6">
        <h2 className="text-xl sm:text-2xl font-bold">Gestion des Utilisateurs</h2>
        {!showAddForm && (
          <button
            onClick={() => setShowAddForm(true)}
            className="bg-blue-900 text-white px-4 py-2 rounded-lg hover:bg-blue-800 flex items-center gap-2 w-full sm:w-auto justify-center"
          >
            <Plus size={20} />
            Ajouter
          </button>
        )}
      </div>

      {showAddForm && (
        <div className="bg-white rounded-lg shadow p-4 sm:p-6 mb-6">
          <h3 className="text-lg sm:text-xl font-bold mb-4">Ajouter un utilisateur</h3>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">Email</label>
              <input
                type="email"
                value={newUserEmail}
                onChange={(e) => setNewUserEmail(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && !submitting && handleAddUser()}
                className="w-full px-3 py-2 border rounded-lg"
                placeholder="utilisateur@caserne.fr"
                disabled={submitting}
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Rôle</label>
              <select
                value={newUserRole}
                onChange={(e) => setNewUserRole(e.target.value)}
                className="w-full px-3 py-2 border rounded-lg"
                disabled={submitting}
              >
                <option value="user">Utilisateur</option>
                <option value="admin">Administrateur</option>
              </select>
            </div>
            {error && (
              <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg text-sm">
                {error}
              </div>
            )}
            <div className="flex flex-col sm:flex-row gap-3">
              <button
                onClick={() => {
                  setShowAddForm(false);
                  setNewUserEmail('');
                  setNewUserRole('user');
                  setError('');
                }}
                className="flex-1 bg-gray-600 text-white py-2 rounded-lg"
                disabled={submitting}
              >
                Annuler
              </button>
              <button
                onClick={handleAddUser}
                className="flex-1 bg-blue-900 text-white py-2 rounded-lg disabled:bg-gray-400"
                disabled={submitting}
              >
                {submitting ? 'Ajout...' : 'Ajouter'}
              </button>
            </div>
          </div>
        </div>
      )}

      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full min-w-[600px]">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 sm:px-6 py-3 text-left text-sm font-medium">Email</th>
                <th className="px-4 sm:px-6 py-3 text-left text-sm font-medium">Rôle</th>
                <th className="px-4 sm:px-6 py-3 text-left text-sm font-medium">Statut</th>
                <th className="px-4 sm:px-6 py-3 text-left text-sm font-medium">Actions</th>
              </tr>
            </thead>
            <tbody className="divide-y">
              {users.map((u) => (
                <tr key={u.id}>
                  <td className="px-4 sm:px-6 py-4 text-sm">{u.email}</td>
                  <td className="px-4 sm:px-6 py-4">
                    {u.role === 'superadmin' ? (
                      <span className="bg-purple-100 text-purple-800 px-2 py-1 rounded-full text-xs font-medium">
                        Super Admin
                      </span>
                    ) : (
                      <select
                        value={u.role}
                        onChange={(e) => handleChangeRole(u.id, e.target.value)}
                        className="px-2 py-1 border rounded text-xs"
                      >
                        <option value="user">Utilisateur</option>
                        <option value="admin">Admin</option>
                      </select>
                    )}
                  </td>
                  <td className="px-4 sm:px-6 py-4">
                    {u.validated ? (
                      <span className="bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs">
                        Validé
                      </span>
                    ) : (
                      <span className="bg-red-100 text-red-800 px-2 py-1 rounded-full text-xs">
                        En attente
                      </span>
                    )}
                  </td>
                  <td className="px-4 sm:px-6 py-4">
                    <div className="flex gap-2 flex-wrap">
                      {!u.validated && (
                        <button
                          onClick={() => handleValidate(u.id)}
                          className="bg-green-600 text-white px-2 py-1 rounded hover:bg-green-700 text-xs"
                        >
                          Valider
                        </button>
                      )}
                      {u.role !== 'superadmin' && (
                        <button
                          onClick={() => handleDelete(u)}
                          className="bg-red-600 text-white px-2 py-1 rounded hover:bg-red-700 text-xs"
                        >
                          Supprimer
                        </button>
                      )}
                      {u.role === 'superadmin' && (
                        <span className="text-gray-400 text-xs italic">Protégé</span>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}

// ==================== FICHIER: src/components/admin/TabVehicules.jsx ====================

// src/components/admin/TabVehicules.jsx
import React, { useState, useEffect } from 'react';
import { Plus, Edit2, Trash2 } from 'lucide-react';
import { DB } from '../../services/db';

export default function TabVehicules() {
  const [camions, setCamions] = useState([]);
  const [show, setShow] = useState(false);
  const [editing, setEditing] = useState(null);
  const [form, setForm] = useState({ marque: '', type: '', immatriculation: '' });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    loadCamions();
  }, []);

  async function loadCamions() {
    const data = await DB.getCamions();
    setCamions(data);
    setLoading(false);
  }

  const handleSubmit = async () => {
    if (!form.marque || !form.type || !form.immatriculation) {
      setError('Tous les champs requis');
      return;
    }

    const exists = camions.find(
      (c) => c.immatriculation === form.immatriculation && c.id !== editing?.id
    );
    if (exists) {
      setError('Immatriculation existe');
      return;
    }

    setSubmitting(true);
    try {
      if (editing) {
        await DB.updateCamion(editing.id, form);
      } else {
        await DB.addCamion(form);
      }
      setForm({ marque: '', type: '', immatriculation: '' });
      setShow(false);
      setEditing(null);
      setError('');
      await loadCamions();
    } catch (err) {
      setError('Erreur: ' + err.message);
    }
    setSubmitting(false);
  };

  const handleEdit = (c) => {
    setEditing(c);
    setForm({ marque: c.marque, type: c.type, immatriculation: c.immatriculation });
    setShow(true);
    setError('');
  };

  const handleDelete = async (c) => {
    if (window.confirm(`Supprimer ${c.immatriculation} ?`)) {
      try {
        await DB.deleteCamion(c.id);
        await loadCamions();
      } catch (err) {
        alert('Erreur: ' + err.message);
      }
    }
  };

  if (loading) {
    return (
      <div className="p-6 flex justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-4 border-blue-900"></div>
      </div>
    );
  }

  return (
    <div className="p-4 sm:p-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 mb-6">
        <h2 className="text-xl sm:text-2xl font-bold">Gestion des Véhicules</h2>
        {!show && (
          <button
            onClick={() => setShow(true)}
            className="bg-blue-900 text-white px-4 py-2 rounded-lg hover:bg-blue-800 flex items-center gap-2 w-full sm:w-auto justify-center"
          >
            <Plus size={20} />
            Nouveau
          </button>
        )}
      </div>
      {show && (
        <div className="bg-white rounded-lg shadow p-4 sm:p-6 mb-6">
          <h3 className="text-lg sm:text-xl font-bold mb-4">
            {editing ? 'Modifier' : 'Nouveau'} Camion
          </h3>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">Marque</label>
              <input
                type="text"
                value={form.marque}
                onChange={(e) => setForm({ ...form, marque: e.target.value })}
                className="w-full px-3 py-2 border rounded-lg"
                disabled={submitting}
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Type</label>
              <input
                type="text"
                value={form.type}
                onChange={(e) => setForm({ ...form, type: e.target.value })}
                className="w-full px-3 py-2 border rounded-lg"
                disabled={submitting}
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Immatriculation</label>
              <input
                type="text"
                value={form.immatriculation}
                onChange={(e) =>
                  setForm({ ...form, immatriculation: e.target.value.toUpperCase() })
                }
                className="w-full px-3 py-2 border rounded-lg"
                disabled={submitting}
              />
            </div>
            {error && (
              <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg text-sm">
                {error}
              </div>
            )}
            <div className="flex flex-col sm:flex-row gap-3">
              <button
                type="button"
                onClick={() => {
                  setShow(false);
                  setEditing(null);
                  setForm({ marque: '', type: '', immatriculation: '' });
                  setError('');
                }}
                className="flex-1 bg-gray-600 text-white py-2 rounded-lg"
                disabled={submitting}
              >
                Annuler
              </button>
              <button
                onClick={handleSubmit}
                className="flex-1 bg-blue-900 text-white py-2 rounded-lg disabled:bg-gray-400"
                disabled={submitting}
              >
                {submitting ? 'Enregistrement...' : editing ? 'Enregistrer' : 'Créer'}
              </button>
            </div>
          </div>
        </div>
      )}
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full min-w-[600px]">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 sm:px-6 py-3 text-left text-sm font-medium">Marque</th>
                <th className="px-4 sm:px-6 py-3 text-left text-sm font-medium">Type</th>
                <th className="px-4 sm:px-6 py-3 text-left text-sm font-medium">
                  Immatriculation
                </th>
                <th className="px-4 sm:px-6 py-3 text-left text-sm font-medium">Actions</th>
              </tr>
            </thead>
            <tbody className="divide-y">
              {camions.map((c) => (
                <tr key={c.id}>
                  <td className="px-4 sm:px-6 py-4">{c.marque}</td>
                  <td className="px-4 sm:px-6 py-4">{c.type}</td>
                  <td className="px-4 sm:px-6 py-4 font-bold">{c.immatriculation}</td>
                  <td className="px-4 sm:px-6 py-4">
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleEdit(c)}
                        className="text-blue-600 hover:text-blue-800"
                      >
                        <Edit2 size={18} />
                      </button>
                      <button
                        onClick={() => handleDelete(c)}
                        className="text-red-600 hover:text-red-800"
                      >
                        <Trash2 size={18} />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}

// ==================== FICHIER: src/main.jsx ====================

// src/main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// ==================== FICHIER: src/index.css ====================

/* src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

